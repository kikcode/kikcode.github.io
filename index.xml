<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Hello Kikcode</title>
    <link>https://kikcode.github.io/</link>
    <description>Recent content in Introduction on Hello Kikcode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Thu, 28 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kikcode.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Adobe Express</title>
      <link>https://kikcode.github.io/posts/adobe-express/</link>
      <pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kikcode.github.io/posts/adobe-express/</guid>
      <description>아래 Adobe Creative Cloud 플랜의 일부로 포함되어 있습니다.
Create Cloud 모든 앱 플랜 일부 단일 앱 플랜. Adobe 계정을 확인하여 내 단일 앱 플랜에 Adobe Express가 포함되어 있는지 확인하세요. Adobe Express를 사용하여 웹 페이지 만들기
Adobe Express를 사용하여 웹 페이지 호스팅</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://kikcode.github.io/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://kikcode.github.io/posts/creating-a-new-theme/</guid>
      <description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://kikcode.github.io/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://kikcode.github.io/posts/migrate-from-jekyll/</guid>
      <description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://kikcode.github.io/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://kikcode.github.io/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://kikcode.github.io/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://kikcode.github.io/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kikcode.github.io/docs/kikdocs/hugo/configure-hugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kikcode.github.io/docs/kikdocs/hugo/configure-hugo/</guid>
      <description> Configure Hugo # Configuration file # 기본 사이트 설정 파일(사이트 루트에 위치한다.)
hugo.toml, hugo.yaml, 또는 hugo.json
설정 파일 재정의 # hugo --config debugconfig.toml hugo --config a.toml,b.toml,.toml </description>
    </item>
    
    <item>
      <title></title>
      <link>https://kikcode.github.io/docs/kikdocs/hugo/hugo-bundles-%EC%A2%85%EB%A5%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kikcode.github.io/docs/kikdocs/hugo/hugo-bundles-%EC%A2%85%EB%A5%98/</guid>
      <description>Hugo bundles 종류 # 브렌치 번들 : 공통의 첫머리를 공유하는 페이지 세트. 브랜치 번들은 _index.md를 템플릿으로 사용하여 각각의 컨텐츠 리프 페이지를 대표한다. 예 : blog 특정 주제에 대한 블로그 게시물이나 문서처럼 여러 개의 유사한 페이지 집합이 필요한 경우를 일커른다 리프 번들 : 단일 페이지. 단일 페이지는 머리글과 컨텐츠로 구성된 index.md index.md : 여러 리프 페이지의 분기를 형성하는 폴더(예 : menu폴더의 index.md)에 단일 페이지로 사용된다. # 브렌치 번들에서 새 리프 페이지 생성 hugo new post-1.</description>
    </item>
    
  </channel>
</rss>
